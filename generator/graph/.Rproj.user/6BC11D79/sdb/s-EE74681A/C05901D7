{
    "collab_server" : "",
    "contents" : "---\ntitle: \"graph\"\nauthor: \"Julian Caceres - 100859759\"\ndate: \"7/20/2017\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n# KEY PACKAGES\n# Install those now if you do not have the latest versions. \n# (please do NOT load them yet!)\n\n\n# OPTIONAL PACKAGES\n# Install those if you  would like to run through all of the\n# examples below (those are not critical and can be skipped).\n\ninstall.packages(\"RColorBrewer\")\ninstall.packages(\"extrafont\")\ninstall.packages(\"png\")\ninstall.packages(\"networkD3\")\ninstall.packages(\"animation\")\ninstall.packages(\"maps\")\ninstall.packages(\"geosphere\")\n \n\n# --DATASET 1: edgelist--\n```{r addnodes}\nnodes <- read.csv(\"../nodes.csv\", header=T, as.is=T)\nlinks <- read.csv(\"../edges.csv\", header=T, as.is=T)\n```\n```{r examine}\n# Examine the data:\nhead(nodes)\nhead(links)\n\nnrow(nodes); length(unique(nodes$id))\nnrow(links); nrow(unique(links[,c(\"from\", \"to\")]))\nnrow(unique(links[,c(\"from\", \"to\", \"type\")]))\n```\n\n# 3. Plotting networks with igraph \n\n  \n#  ------->> Turning networks into igraph objects  --------\n```{r mainlib}\nlibrary(\"igraph\")\n```\n\n# DATASET 1 \n```{r maindataset}\n\n# Converting the data to an igraph object:\n# The graph_from_data_frame() function takes two data frames: 'd' and 'vertices'.\n# 'd' describes the edges of the network - it should start with two columns \n# containing the source and target node IDs for each network tie.\n# 'vertices' should start with a column of node IDs.\n# Any additional columns in either data frame are interpreted as attributes.\nnet <- graph_from_data_frame(d=links, vertices=nodes, directed=T) \n\n# Examine the resulting object:\nclass(net)\nnet \n\n```\n# We can access the nodes, edges, and their attributes:\n```{r accessnodes}\nE(net)\nV(net)\nE(net)$type\nV(net)$media\n# Removing loops from the graph:\nnet <- simplify(net, remove.multiple = F, remove.loops = T) \n\n\n```\n\n# Plotting parameters in igraph\n\n```{r helpplot}\n# Plotting with igraph: node options (starting with 'vertex.') and edge options\n# (starting with 'edge.'). A list of options is included in your handout.\n?igraph.plotting\n```\n\n```{r plot1}\n# We can set the node & edge options in two ways - one is to specify\n# them in the plot() function, as we are doing below.\n\n# Plot with curved edges (edge.curved=.1) and reduce arrow size:\n# Note that using curved edges will allow you to see multiple links\n# between two nodes (e.g. links going in either direction, or multiplex links)\nplot(net, edge.arrow.size=.4, edge.curved=.1)\n```\n```{r name}\n# Set node color to orange and the border color to hex #555555\n# Replace the vertex label with the node names stored in \"media\"\nplot(net, edge.arrow.size=.4, edge.curved=0,\n     vertex.color=\"orange\", vertex.frame.color=\"#555555\",\n     vertex.label=V(net)$media, vertex.label.color=\"black\",\n     vertex.label.cex=.7) \n```\n# The second way to set attributes is to add them to the igraph object.\n\n# Generate colors based on media type:\n```{r colorcommunity}\n# Generate colors based on media type:\ncolrs <- c(\"gray50\", \"tomato\", \"gold\",\"blue\",\"green\")\nV(net)$color <- colrs[V(net)$media.type]\n\n# Compute node degrees (#links) and use that to set node size:\ndeg <- degree(net, mode=\"all\")\nV(net)$size <- deg*3\n# We could also use the audience size value:\nV(net)$size <- V(net)$audience.size*0.6\n\n# The labels are currently node IDs.\n# Setting them to NA will render no labels:\nV(net)$label <- NA\n\n# Set edge width based on weight:\nE(net)$width <- E(net)$weight/6\n\n#change arrow size and edge color:\nE(net)$arrow.size <- .2\nE(net)$edge.color <- \"gray80\"\nE(net)$width <- 1+E(net)$weight/12\nplot(net) \n```\n",
    "created" : 1500571691142.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3630994546",
    "id" : "C05901D7",
    "lastKnownWriteTime" : 1500574911,
    "last_content_update" : 1500574911414,
    "path" : "~/Workspace/stochastic-blockmodel-master/graph/graphito.Rmd",
    "project_path" : "graphito.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}